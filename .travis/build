#!/bin/bash
set -ev

# Directories.
root_dir=`pwd`
build_dir="$root_dir/_travis/build"
install_dir="$root_dir/_travis/install"
export DEVEL_DIR="$root_dir/_travis/"

# Shortcuts.
git_clone="git clone --recursive --quiet"
git_branch=devel

# Create layout.
rm -rf "$build_dir" "$install_dir"
mkdir -p "$build_dir"
mkdir -p "$install_dir"

# Setup environment variables.
export LD_LIBRARY_PATH="$install_dir/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$install_dir/lib/`dpkg-architecture -qDEB_BUILD_MULTIARCH`:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="$install_dir/lib/pkgconfig:$PKG_CONFIG_PATH"
export PKG_CONFIG_PATH="$install_dir/lib/`dpkg-architecture -qDEB_BUILD_MULTIARCH`/pkgconfig:$PKG_CONFIG_PATH"
# This is a hack for travis
export PYTHONPATH="/usr/lib/python2.7/dist-packages:$PYTHONPATH"

cmake_args="-DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_PREFIX:STRING='$install_dir' -DCMAKE_BUILD_TYPE=Release"
make_args="-s -j4"

install_eigen3()
{
    echo "--> Compiling Eigen"
    mkdir -p "$build_dir"
    cd "$build_dir"
    wget --quiet -O - "http://bitbucket.org/eigen/eigen/get/3.2.4.tar.bz2" | tar -xj
    mv eigen-eigen-10219c95fe65 eigen3
    cd "$build_dir/eigen3"
    mkdir build
    cd build
    cmake $cmake_args -Dpkg_config_libdir="$install_dir/lib" ..
    make $make_args install > /dev/null
}

# 3 mandatory options: url, extracted directory name, tar options
install_dep_from_tar()
{
    echo "--> Compiling $2 from $1"
    mkdir -p "$build_dir"
    cd "$build_dir"
    wget --quiet -O - "$1" | tar $3;
    cd "$build_dir/$2"
    mkdir build
    cd build
    cmake $cmake_args ..
    make $make_args install > /dev/null
}

install_doxygen()
{
    echo "--> Installing Doxygen"
    mkdir -p "$build_dir"
    cd "$build_dir"
    wget --quiet -O - "ftp://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.11.linux.bin.tar.gz" | tar -xz;
    cd "$build_dir/doxygen-1.8.11"
    ./configure --prefix "$install_dir"
    make $make_args install > /dev/null
}

install_dependency()
{
    echo "--> Compiling $1"
    mkdir -p "$build_dir/$1"
    cd "$build_dir"
    if [ "$#" -eq "2" ]; then
      branch=$2
    else
      branch=$git_branch
    fi
    $git_clone --branch $branch "git://github.com/$1" "$1"
    cd "$build_dir/$1"
    mkdir build
    cd build
    cmake $cmake_args ..
    make $make_args install > /dev/null
}

# Install dependencies

install_eigen3
pkg-config --exists "eigen3 >= 3.2.4" --print-errors
if [ ! "$?" -eq "0" ]; then echo "Wrong eigen version"; exit 1; fi

install_dep_from_tar "https://github.com/roboptim/roboptim-core/releases/download/v3.1/roboptim-core-3.1.tar.bz2" "roboptim-core-3.1" "-xj"
install_dep_from_tar "https://github.com/roboptim/roboptim-trajectory/releases/download/v3.1/roboptim-trajectory-3.1.tar.bz2" "roboptim-trajectory-3.1" "-xj"

install_doxygen

wget --quiet -O $DEVEL_DIR/config.sh https://raw.githubusercontent.com/humanoid-path-planner/hpp-doc/master/doc/config.sh
source $DEVEL_DIR/config.sh

install_dependency humanoid-path-planner/hpp-util               devel
install_dependency humanoid-path-planner/hpp-fcl                devel
install_dependency laas/hpp-template-corba                      devel

install_dependency humanoid-path-planner/hpp-model              devel
install_dependency humanoid-path-planner/qpOASES                master
install_dependency humanoid-path-planner/hpp-constraints        devel
install_dependency humanoid-path-planner/hpp-statistics         devel
install_dependency humanoid-path-planner/hpp-core               devel
install_dependency humanoid-path-planner/hpp-model-urdf         devel
install_dependency humanoid-path-planner/hpp-corbaserver        devel

install_dependency humanoid-path-planner/hpp-walkgen              devel
install_dependency humanoid-path-planner/hpp-wholebody-step       devel
install_dependency humanoid-path-planner/hpp-wholebody-step-corba devel

install_dependency humanoid-path-planner/hpp-manipulation       devel
install_dependency humanoid-path-planner/hpp-manipulation-urdf  devel
install_dependency humanoid-path-planner/hpp-manipulation-corba devel

install_dependency humanoid-path-planner/iai_maps               devel

# Compile and run tests
cd "$build_dir"
cmake "$root_dir" -DCMAKE_INSTALL_PREFIX="$install_dir"		\
		  -DCMAKE_INSTALL_PREFIX:STRING="$install_dir"
make $make_args
# make $make_args test
make $make_args install
